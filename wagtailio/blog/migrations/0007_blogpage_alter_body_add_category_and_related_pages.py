# Generated by Django 3.2.12 on 2022-08-18 11:05

import django.db.models.deletion
from django.db import migrations, models

import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.images.blocks

import wagtailio.utils.blocks


class Migration(migrations.Migration):

    dependencies = [
        ("taxonomy", "0001_initial"),
        ("blog", "0006_blogpage_airtable_record_id"),
    ]

    operations = [
        migrations.AddField(
            model_name="blogpage",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="taxonomy.category",
            ),
        ),
        migrations.AlterField(
            model_name="blogpage",
            name="body",
            field=wagtail.core.fields.StreamField(
                [
                    (
                        "h2",
                        wagtail.core.blocks.CharBlock(
                            form_classname="title", icon="title"
                        ),
                    ),
                    (
                        "h3",
                        wagtail.core.blocks.CharBlock(
                            form_classname="title", icon="title"
                        ),
                    ),
                    (
                        "h4",
                        wagtail.core.blocks.CharBlock(
                            form_classname="title", icon="title"
                        ),
                    ),
                    ("intro", wagtail.core.blocks.RichTextBlock(icon="pilcrow")),
                    ("paragraph", wagtail.core.blocks.RichTextBlock(icon="pilcrow")),
                    (
                        "blockquote",
                        wagtail.core.blocks.CharBlock(
                            form_classname="title", icon="openquote"
                        ),
                    ),
                    ("image", wagtail.images.blocks.ImageChooserBlock(icon="image")),
                    (
                        "document",
                        wagtail.documents.blocks.DocumentChooserBlock(
                            icon="doc-full-inverse"
                        ),
                    ),
                    (
                        "imagecaption",
                        wagtail.core.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                ("caption", wagtail.core.blocks.RichTextBlock()),
                            ],
                            label="Image caption",
                        ),
                    ),
                    (
                        "textimage",
                        wagtail.core.blocks.StructBlock(
                            [
                                ("text", wagtail.core.blocks.RichTextBlock()),
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "background",
                                    wagtailio.utils.blocks.BackgroundColourChoiceBlock(),
                                ),
                                (
                                    "alignment",
                                    wagtailio.utils.blocks.SimpleImageFormatChoiceBlock(),
                                ),
                            ],
                            icon="image",
                        ),
                    ),
                    (
                        "colourtext",
                        wagtail.core.blocks.StructBlock(
                            [
                                ("text", wagtail.core.blocks.RichTextBlock()),
                                (
                                    "background",
                                    wagtailio.utils.blocks.BackgroundColourChoiceBlock(),
                                ),
                            ],
                            icon="pilcrow",
                        ),
                    ),
                    (
                        "calltoaction",
                        wagtail.core.blocks.StructBlock(
                            [
                                ("text", wagtail.core.blocks.RichTextBlock()),
                                (
                                    "background",
                                    wagtailio.utils.blocks.BackgroundColourChoiceBlock(),
                                ),
                            ],
                            icon="pilcrow",
                        ),
                    ),
                    (
                        "tripleimage",
                        wagtail.core.blocks.StructBlock(
                            [
                                (
                                    "first_image",
                                    wagtail.images.blocks.ImageChooserBlock(),
                                ),
                                (
                                    "second_image",
                                    wagtail.images.blocks.ImageChooserBlock(),
                                ),
                                (
                                    "third_image",
                                    wagtail.images.blocks.ImageChooserBlock(),
                                ),
                            ],
                            icon="image",
                        ),
                    ),
                    (
                        "stats",
                        wagtail.core.blocks.ListBlock(
                            wagtail.core.blocks.StructBlock(
                                [
                                    (
                                        "image",
                                        wagtail.images.blocks.ImageChooserBlock(),
                                    ),
                                    ("stat", wagtail.core.blocks.CharBlock()),
                                    ("text", wagtail.core.blocks.CharBlock()),
                                ],
                                icon="code",
                            )
                        ),
                    ),
                    ("embed", wagtail.embeds.blocks.EmbedBlock(icon="code")),
                    ("markdown", wagtailio.utils.blocks.MarkDownBlock()),
                    (
                        "codeblock",
                        wagtail.core.blocks.StructBlock(
                            [
                                (
                                    "language",
                                    wagtail.core.blocks.ChoiceBlock(
                                        choices=[
                                            ("bash", "Bash/Shell"),
                                            ("css", "CSS"),
                                            ("django", "Django templating language"),
                                            ("html", "HTML"),
                                            ("javascript", "Javascript"),
                                            ("python", "Python"),
                                            ("scss", "SCSS"),
                                        ]
                                    ),
                                ),
                                ("code", wagtail.core.blocks.TextBlock()),
                            ]
                        ),
                    ),
                    (
                        "backers",
                        wagtail.core.blocks.StructBlock(
                            [
                                (
                                    "gold_backers",
                                    wagtail.core.blocks.ListBlock(
                                        wagtail.core.blocks.StructBlock(
                                            [
                                                (
                                                    "name",
                                                    wagtail.core.blocks.CharBlock(),
                                                ),
                                                (
                                                    "image",
                                                    wagtail.images.blocks.ImageChooserBlock(
                                                        required=False
                                                    ),
                                                ),
                                                (
                                                    "url",
                                                    wagtail.core.blocks.URLBlock(
                                                        required=False
                                                    ),
                                                ),
                                            ]
                                        )
                                    ),
                                ),
                                (
                                    "silver_backers",
                                    wagtail.core.blocks.ListBlock(
                                        wagtail.core.blocks.StructBlock(
                                            [
                                                (
                                                    "name",
                                                    wagtail.core.blocks.CharBlock(),
                                                ),
                                                (
                                                    "image",
                                                    wagtail.images.blocks.ImageChooserBlock(
                                                        required=False
                                                    ),
                                                ),
                                                (
                                                    "url",
                                                    wagtail.core.blocks.URLBlock(
                                                        required=False
                                                    ),
                                                ),
                                            ]
                                        )
                                    ),
                                ),
                                (
                                    "bronze_backers",
                                    wagtail.core.blocks.ListBlock(
                                        wagtail.core.blocks.StructBlock(
                                            [
                                                (
                                                    "name",
                                                    wagtail.core.blocks.CharBlock(),
                                                ),
                                                (
                                                    "image",
                                                    wagtail.images.blocks.ImageChooserBlock(
                                                        required=False
                                                    ),
                                                ),
                                                (
                                                    "url",
                                                    wagtail.core.blocks.URLBlock(
                                                        required=False
                                                    ),
                                                ),
                                            ]
                                        )
                                    ),
                                ),
                                (
                                    "linked_backers",
                                    wagtail.core.blocks.ListBlock(
                                        wagtail.core.blocks.StructBlock(
                                            [
                                                (
                                                    "name",
                                                    wagtail.core.blocks.CharBlock(),
                                                ),
                                                (
                                                    "url",
                                                    wagtail.core.blocks.URLBlock(
                                                        required=False
                                                    ),
                                                ),
                                            ]
                                        )
                                    ),
                                ),
                                (
                                    "named_backers",
                                    wagtail.core.blocks.ListBlock(
                                        wagtail.core.blocks.StructBlock(
                                            [("name", wagtail.core.blocks.CharBlock())]
                                        )
                                    ),
                                ),
                            ]
                        ),
                    ),
                    (
                        "standalone_cta",
                        wagtail.core.blocks.StructBlock(
                            [
                                (
                                    "cta",
                                    wagtail.core.blocks.StructBlock(
                                        [
                                            (
                                                "text",
                                                wagtail.core.blocks.CharBlock(
                                                    label="CTA text",
                                                    max_length=255,
                                                    required=False,
                                                ),
                                            ),
                                            (
                                                "cta_page",
                                                wagtail.core.blocks.PageChooserBlock(
                                                    label="CTA page", required=False
                                                ),
                                            ),
                                            (
                                                "cta_url",
                                                wagtail.core.blocks.URLBlock(
                                                    label="CTA URL", required=False
                                                ),
                                            ),
                                        ]
                                    ),
                                ),
                                (
                                    "description",
                                    wagtail.core.blocks.TextBlock(
                                        label="Short description",
                                        max_length=100,
                                        required=False,
                                    ),
                                ),
                            ]
                        ),
                    ),
                ]
            ),
        ),
        migrations.CreateModel(
            name="BlogPageRelatedPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="blog.blogpage",
                    ),
                ),
                (
                    "parent",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_posts",
                        to="blog.blogpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
